services:
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    volumes:
      - ./:/app
    working_dir: /app
    environment:
      - PYTHONPATH=/app
    ports:
      - "8001:8001"
      - "8081:8081"

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.13-management
    healthcheck:
      test: rabbitmq-diagnostics -q ping
#      test: curl --fail http://0.0.0.0:15672 || exit 1
      interval: 30s
      timeout: 10s
      retries: 20
    ports:
      - '5672:5672'
      - '15672:15672'

  db:
    container_name: db
    image: postgres:latest
    ports:
      - "5432:5432"
    command: [ "postgres", "-c", "log_statement=all", "-c", "log_destination=stderr" ]
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "postgres" ]
      interval: 1s
      retries: 20
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"

  consumer:
    container_name: consumer
    build:
      dockerfile: docker/backend/Dockerfile
      context: .
    command: python3 /app/consumer
    restart: on-failure
    env_file:
      - ./animals/backend/consumer/config/.env
    volumes:
      - ./animals/backend:/app/
      - ./data/:/data
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_healthy

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    volumes:
      - ./animals/frontend/src:/app/src
      - ./animals/frontend/public:/app/public
    command: >
        /bin/sh -c "npm start"

  webserver:
    container_name: nginx
    build:
      context: .
      dockerfile: docker/webserver/Dockerfile
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started

  triton:
    container_name: triton
    build:
      context: .
      dockerfile: docker/triton/Dockerfile
#    deploy:
#      resources:
#        reservations:
#          devices:
#            - driver: nvidia
#              count: 1
#              capabilities: [ gpu ]
    volumes:
      - ./animals/triton/models:/models
#    environment:
#      - NVIDIA_VISIBLE_DEVICES=all
    command: >
        /bin/sh -c "tritonserver --http-port=8002 --metrics-port=8003 --grpc-port=8004 --model-repository=/models"
    ports:
      - 8002:8002
      - 8003:8003
      - 8004:8004
